name: ci

on: [push, pull_request]

jobs:
  crossbuild:
    name: crossbuild
    strategy:
      matrix:
        GOOS: ['freebsd', 'openbsd', 'darwin']
        GOARCH: ['amd64']
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - run: |
          go env
          go build ./cmd/gobgp
          go build ./cmd/gobgpd
        env:
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}

  unit:
    name: unit
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - run: |
          go test -race -timeout 240s ./...
          if [ "$(go env GOARCH)" = "amd64" ]; then go test -race github.com/osrg/gobgp/v3/pkg/packet/bgp -run ^Test_RaceCondition$; else echo 'skip'; fi

  unit386:
    name: unit386
    runs-on: ubuntu-20.04
    env:
      GOARCH: 386
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - run: |
          go env GOARCH
          go test -timeout 240s ./...

  golangci:
    name: lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3

  embeded:
    name: embeded
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - run: |
          python test/scenario_test/ci-scripts/build_embeded_go.py docs/sources/lib.md
          python test/scenario_test/ci-scripts/build_embeded_go.py docs/sources/lib-ls.md

  lintdoc:
    name: lintdoc
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: |
          npm install markdownlint-cli
          ./node_modules/.bin/markdownlint $(find . -type d -name 'node_modules' -prune -o -type f -name '*.md' -print)
          sudo apt-get install python3-setuptools
          sudo pip3 install scspell3k
          tools/spell-check/scspell.sh
          tools/grep_avoided_functions.sh

  build:
    name: build container image
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: 'test/pip-requires.txt'
      - run: pip install -r test/pip-requires.txt
      - name: container image
        run: |
          fab -r test/lib make-gobgp-ctn --tag gobgp --from-image osrg/quagga
          docker save gobgp > gobgp.tar
          fab -r test/lib make-gobgp-ctn --tag gobgp-oq --from-image osrg/quagga:v1.0
          docker save gobgp-oq > gobgp-oq.tar

      - name: upload image file
        uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: |
            gobgp.tar
            gobgp-oq.tar

  set-scenarios:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      scenarios: ${{ steps.set-scenarios.outputs.scenarios }}
    steps:
      - uses: actions/checkout@v3
      - id: set-scenarios
        run: echo "::set-output name=scenarios::$(ls test/scenario_test/*.py | xargs -I{} basename {} .py | jq -R -s -c 'split("\n")[:-1]')"

  scenario_test:
    name: scenario test
    needs: set-scenarios
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        scenario: ${{ fromJson(needs.set-scenarios.outputs.scenarios) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: 'test/pip-requires.txt'
      - run: pip install -r test/pip-requires.txt
      - name: setup docker
        run: |
          echo  "{\"ipv6\": true,\"fixed-cidr-v6\": \"2001:db8:1::/64\"}" > daemon.json
          sudo cp daemon.json /etc/docker
          sudo systemctl restart docker
          # don't assign ipv6 addresss to docker0 bridge so two containers have p2p link.
          sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0
          sudo sysctl -w net.ipv6.conf.default.disable_ipv6=0
          sudo sysctl -w net.ipv6.conf.docker0.disable_ipv6=1
      - name: test
        run: |
          docker load < artifact/gobgp.tar
          PYTHONPATH=test python3 test/scenario_test/${{ matrix.scenario }}.py --gobgp-image gobgp -x -s
        if: ${{ ! contains(fromJson('["bgp_zebra_nht_test", "zapi_v3_test", "zapi_v3_multipath_test"]'), matrix.scenario) }}
      - name: test with zapi v3
        run: |
          docker load < artifact/gobgp-oq.tar
          PYTHONPATH=test python3 test/scenario_test/${{ matrix.scenario }}.py --gobgp-image gobgp-oq -x -s
        if: ${{ contains(fromJson('["bgp_zebra_nht_test", "zapi_v3_test", "zapi_v3_multipath_test"]'), matrix.scenario) }}
